<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Althinect\FilamentSpatieRolesPermissions\Concerns\HasSuperAdmin;
use App\Observers\UserObserver;
use Bavix\Wallet\Interfaces\Wallet;
use Bavix\Wallet\Traits\HasWallet;
use Bavix\Wallet\Traits\HasWallets;
use Filament\Facades\Filament;
use Filament\Models\Contracts\FilamentUser;
use Filament\Models\Contracts\HasName;
use Filament\Models\Contracts\HasTenants;
use Filament\Panel;
use Illuminate\Database\Eloquent\Attributes\ObservedBy;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Concerns\HasUlids;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Notification;
use Illuminate\Support\Facades\URL;
use Spatie\Activitylog\LogOptions;
use Spatie\Activitylog\Traits\LogsActivity;
use Spatie\Permission\Traits\HasRoles;
use Tapp\FilamentInvite\Notifications\SetPassword;

#[ObservedBy([UserObserver::class])]
class User extends Authenticatable implements FilamentUser, HasName, HasTenants, Wallet
{
    use HasFactory,
        HasRoles,
        HasSuperAdmin,
        HasUlids,
        HasWallet,
        HasWallets,
        LogsActivity,
        Notifiable,
        SoftDeletes;

    public function canAccessPanel(Panel $panel) : bool
    {
        if(auth()->user()->isSuperAdmin()) {
            return true;
        } else if($panel->getId() == 'team' && $this->getDefaultTeam($panel)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [

        'first_name',
        'last_name',
        'email',
        'email_verified_at',
        'password',
        'team_id',
        'status',
        'wingolfit',
        'phone',
        'mobile',
        'address',
        'zip_code',
        'city',
        'country',
        'admission_date',
        'leaving_date',
        'birthday',
        'death_date',
        'remember_token',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::updated(function (Model $model) {

        });
    }

    public function getActivitylogOptions(): LogOptions
    {
        return LogOptions::defaults()
            ->logAll()
            ->logExcept(['updated_at'])
            ->logOnlyDirty()
            ->dontSubmitEmptyLogs();
    }

    public function getFilamentName(): string
    {
        return $this->full_name;
    }

    /**
     * Get the display name for the user.
     *
     * @return string
     */
    public function fullName(): Attribute
    {
        return Attribute::make(
            get: fn () => ($this->first_name . ' ' . $this->last_name) ?: $this->email,
        );
    }

    public function getResetPasswordUrl(string $token, array $parameters = []): string
    {
        return URL::signedRoute(
            'filament.team.auth.password-reset.reset',
            [
                'email' => $this->email,
                'token' => $token,
                ...$parameters,
            ],
        );
    }

    public function sendPasswordSetNotification($token)
    {
        $currentTeam = auth()->user()->team;
        $currentTeam->users()->attach($this);
        $this->update([
            'team_id' => $currentTeam->id,
        ]);

        Notification::send($this, new SetPassword($token));
    }

    public function team(): BelongsTo
    {
        return $this->belongsTo(Team::class);
    }

    public function teams(): BelongsToMany
    {
        return $this->belongsToMany(Team::class);
    }

    public function getTenants(Panel $panel): Collection
    {
        return $this->teams;
    }

    public function getDefaultTeam(Panel $panel): ?Model
    {
        return $this->currentTeam ?? $this->teams()->first();
    }

    public function canAccessTenant(Model $tenant): bool
    {
        return $this->teams()->whereKey($tenant)->exists();
    }

    public function memberships(): BelongsToMany
    {
        return $this->belongsToMany(Membership::class)
            ->withPivot(['membership_admission_date', 'membership_leave_date'])
            ->withTimestamps();
    }

    public function room(): HasOne
    {
        return $this->hasOne(Room::class, 'user_id');
    }
}
